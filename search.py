from random import randint #импортируем библиотеку

k = 0 #переменная для подсчета иттерация линейного поиска
t = 0 #переменная для подсчета иттерация линейного поиска

flag = True #создаем переменную, чтобы понять, сколько повторять цикл

while flag is True: 
    flag = False #переставляем в Фолз, чтобы понять, что больлше повторять не надо

    list = []#создаем пустой список для сортировки пузырьком

    for i in range (0, 100): #повторяем 100 раз
        list.append(randint(1, 1_000_000)) #добавляем рандомное число от 0 до 1000000

    #сортировка пузырьком

    stop_flag = True 

    while stop_flag is True: 
        stop_flag = False 
        for i in range(len(list)-1): 
            if list[i] > list[i+1]:
                swap = list[i+1] 
                list[i+1] = list[i]
                list[i] = swap
                stop_flag = True

    stop_flag = True #та же переменная, что и для сортировки пузырьком

    while stop_flag is True: 
        stop_flag = False 
        for i in range(len(list)-1): #повторяем до длинны листа -1, т.к. далее берем i+1
            if list[i] == list[i+1]: #т.к. список отсортирован, то проверяем n-нный и n+1-вый элемент
                if i-1 < 0: #если первый элемент повторяется, то мы посность повторяем наш основной цикл
                    flag = True 
                else: 
                    list[i] = randint(list[i-1], list[i+1]) #перегенерируем число в этом диапазоне, чтобы не сортировать список заново
                    stop_flag = True 

            '''
            тестировал это у себя на промежутке от 0 до 10 и работало без проблем. Но боюсь, что все таки при каких-то 
            определенных числах может дать сбой
            '''

print(list) #вывождим отсортированный список без повторов для удобства выбора элемента для поиска
a = int(input('Введите элемент, который хотите найти: ')) #просим пользователя ввести элемент для поиска

#Линейный поиск
find = False # Создаем переменную, чтобы понять, найден ли элемент
print('Линейный поиск:')
for i in range(0, len(list)): #Перебираем все элементы
    k += 1 #Добавляем иттерации
    if a == list[i]: #если введенное числа равно какому-то элементу из списка
        print(f'Элемент {a} находится в списке на месте c индексом {i}')
        print(f'Для линейного поиска понадобилось {k} иттераций')
        find = True #переставляем переменную в позицию Тру, чтобы показать, что элемент найден
        break #останавливаем цикл
if find == False: #если элемент найден не будет, то мы выведем сообщение ниже
    print(f'Элемент {a} не найден в списке')

print('Бинарный поиск:')
first = 0 #берем самый первый индекс
last = len(list)-1 #и самый последний
index = -1
while (first <= last) and (index == -1): #цикл будет выполняться пока первый индекст будет меньше или равен последнему или мы не найдем нужный элемент
    mid = (first+last)//2 #находим центральный элемент
    if list[mid] == a: #если введенное число равно центральному элементу
        index = mid #то мы присваиваем переменной значение индекса этого элемента
    else: 
        if a<list[mid]: #если введенное число меньше центрального элемента
            last = mid - 1 #мы обрезаем значения справа наполовину
        else: #если введенное число больше центрального элемента
            first = mid + 1  #мы обрезаем значенния слева наполовину

    t += 1 #добавляем одну иттерация
#цикл будет работать, пока введенное числе не будет равно какому-либо новую централному элементу

if index == -1: #если индекс будет равен -1, это будет означать, что мы не нашли элемент
    print(f'Элемент {a} не найден в списке')

else: 
    print(f'Элемент {a} находится в списке на месте c индексом {index}')
    print(f'Для бинарного поиска понадобилось {t} иттераций')